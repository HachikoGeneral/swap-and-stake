[{"/Users/matthewstein/hiremeswap/frontend/src/index.js":"1","/Users/matthewstein/hiremeswap/frontend/src/App.js":"2","/Users/matthewstein/hiremeswap/frontend/src/reportWebVitals.js":"3","/Users/matthewstein/hiremeswap/frontend/src/components/Navbar.jsx":"4","/Users/matthewstein/hiremeswap/frontend/src/components/Swap.jsx":"5","/Users/matthewstein/hiremeswap/frontend/src/components/Footer.jsx":"6","/Users/matthewstein/hiremeswap/frontend/src/components/Stake.jsx":"7"},{"size":582,"mtime":1656451864836,"results":"8","hashOfConfig":"9"},{"size":340,"mtime":1656460121932,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1656451525471,"results":"11","hashOfConfig":"9"},{"size":251,"mtime":1657239832847,"results":"12","hashOfConfig":"9"},{"size":13961,"mtime":1657240058124,"results":"13","hashOfConfig":"9"},{"size":408,"mtime":1657239869252,"results":"14","hashOfConfig":"9"},{"size":22571,"mtime":1657240147599,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"hp21z1",{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},"/Users/matthewstein/hiremeswap/frontend/src/index.js",[],[],[],"/Users/matthewstein/hiremeswap/frontend/src/App.js",[],[],"/Users/matthewstein/hiremeswap/frontend/src/reportWebVitals.js",[],[],"/Users/matthewstein/hiremeswap/frontend/src/components/Navbar.jsx",[],[],"/Users/matthewstein/hiremeswap/frontend/src/components/Swap.jsx",["41"],[],"import React from 'react'\nimport wethicon from \"../images/wethicon.png\"\nimport hmticon from \"../images/hmticon.png\"\nimport daiicon from \"../images/daiicon.png\"\nimport linkicon from \"../images/linkicon.png\"\nimport swapABI from \"../utils/abis/HireMeSwap.json\"\nimport approveABI from \"../utils/abis/approveABI.json\"\nimport { Modal } from \"react-bootstrap\"\nimport { ethers, BigNumber } from \"ethers\"\n\n\n\nfunction Swap() {\n    const { ethereum } = window;\n    const swapContractAddress = \"0x2609172beD21Db65759caD7c048EECdd582671B0\";\n    const swapContractAbi = swapABI.abi;\n    const tokenContractAbi = approveABI.abi;\n\n    const [isConnected, setIsConnected] = React.useState(false);\n    const [isLoading, setIsLoading] = React.useState(false);\n    const [isApproved, setIsApproved] = React.useState(false);\n    const [accounts, setAccounts] = React.useState([]);\n    const [modalShow, setModalShow] = React.useState(false);\n    const [fromTokenSelected, setFromTokenSelected] = React.useState(\"WETH\");\n    const [toTokenSelected, setToTokenSelected] = React.useState(\"HMT\");\n    const [isFrom, setIsFrom] = React.useState(true);\n    const [fromTokenAddress, setFromTokenAddress] = React.useState(\"0xd0A1E359811322d97991E03f863a0C30C2cF029C\");\n    const [toTokenAddress, setToTokenAddress] = React.useState(\"0x8ADc4D9E41eeC6Ef65C310FCEbeFC28e14ed2d1B\");\n    const [inputData, setInputData] = React.useState({ amount: \"\" });\n    const [ouputData, setOutputData] = React.useState(\"Output Amount...\");\n\n\n\n\n\n\n    const TokenCard = ({ icon, name }) => (\n        <div className=\"container\">\n            <div className='row justify-content-center align-items-center'>\n                <div className='col col-4'>\n                    <img src={icon} alt=\"ethy\" />\n                </div>\n                <div className='col col-4 mt-2'>\n                    <h3>{name}</h3>\n                </div>\n            </div>\n        </div>\n    );\n\n    function createSwapContract() {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const hmSwapContract = new ethers.Contract(swapContractAddress, swapContractAbi, signer);\n        return hmSwapContract;\n    }\n\n    function selectToken(token) {\n        isFrom ? setFromTokenSelected(token) : setToTokenSelected(token);\n        isFrom ? getFromAddress(token) : getToAddress(token);\n        setModalShow(false);\n        setIsApproved(false);\n        setInputData({ amount: \"\" });\n    }\n\n    function getFromAddress(token) {\n        if (token === \"WETH\") {\n            setFromTokenAddress(\"0xd0A1E359811322d97991E03f863a0C30C2cF029C\")\n        } else if (token === \"DAI\") {\n            setFromTokenAddress(\"0x4F96Fe3b7A6Cf9725f59d353F723c1bDb64CA6Aa\")\n        } else if (token === \"LINK\") {\n            setFromTokenAddress(\"0xa36085F69e2889c224210F603D836748e7dC0088\")\n        } else {\n            setFromTokenAddress(\"0x8ADc4D9E41eeC6Ef65C310FCEbeFC28e14ed2d1B\")\n        }\n    }\n\n    function getToAddress(token) {\n        if (token === \"WETH\") {\n            setToTokenAddress(\"0xd0A1E359811322d97991E03f863a0C30C2cF029C\")\n        } else if (token === \"DAI\") {\n            setToTokenAddress(\"0x4F96Fe3b7A6Cf9725f59d353F723c1bDb64CA6Aa\")\n        } else if (token === \"LINK\") {\n            setToTokenAddress(\"0xa36085F69e2889c224210F603D836748e7dC0088\")\n        } else {\n            setToTokenAddress(\"0x8ADc4D9E41eeC6Ef65C310FCEbeFC28e14ed2d1B\")\n        }\n    }\n\n    function openFromModal() {\n        setIsFrom(true);\n        setModalShow(true);\n    }\n\n    function OpenToModal() {\n        setIsFrom(false);\n        setModalShow(true);\n    }\n\n\n    function ChooseTokenModal(props) {\n        return (\n            <div>\n                <Modal\n                    {...props}\n                    size=\"lg\"\n                    aria-labelledby=\"contained-modal-title-vcenter\"\n                    centered\n                >\n                    <div className=\"modal-header\">\n                        <h3 className=\"modal-title ms-3\" id=\"staticBackdropLabel\">Select A Token</h3>\n                        <button type=\"button\" className=\"btn-close\" onClick={props.onHide} aria-label=\"Close\"></button>\n                    </div>\n                    <div className=\"modal-body\">\n                        <div className=\"d-grid gap-2 mx-2 mb-2\">\n                            <button className=\"btn btn-dark\" onClick={() => selectToken(\"WETH\")} >\n                                <TokenCard\n                                    icon={wethicon}\n                                    name=\"WETH\" />\n                            </button>\n                            <button className=\"btn btn-dark\" onClick={() => selectToken(\"DAI\")}>\n                                <TokenCard\n                                    icon={daiicon}\n                                    name=\"DAI\" />\n                            </button>\n                            <button className=\"btn btn-dark\" onClick={() => selectToken(\"HMT\")}>\n                                <TokenCard\n                                    icon={hmticon}\n                                    name=\"Hire Me Token\" />\n                            </button>\n                            <button className=\"btn btn-dark\" onClick={() => selectToken(\"LINK\")}>\n                                <TokenCard\n                                    icon={linkicon}\n                                    name=\"Chainlink\" />\n                            </button>\n                        </div>\n                    </div>\n\n                </Modal>\n            </div>\n        );\n    }\n\n    async function connectToMetamask() {\n        if (typeof window.ethereum !== 'undefined') {\n            try {\n                await ethereum.request({ method: \"eth_requestAccounts\" });\n                setAccounts(await ethereum.request({ method: \"eth_accounts\" }));\n                console.log(accounts);\n                setIsConnected(true);\n            } catch (e) {\n                console.log(e);\n            }\n\n        }\n    }\n\n    function checkIfWalletIsConnect() {\n        if (accounts.length > 0) {\n            setIsConnected(true);\n        } else {\n            setIsConnected(false);\n        }\n\n    }\n\n\n    async function approveSwap() {\n        try {\n            if (ethereum) {\n                const { amount } = inputData;\n                const parsedAmount = ethers.utils.parseUnits(amount, 18);\n                const provider = new ethers.providers.Web3Provider(ethereum);\n                const signer = provider.getSigner();\n                const tokenContract = new ethers.Contract(fromTokenAddress, tokenContractAbi, signer);\n                const approval = await tokenContract.approve(swapContractAddress, parsedAmount);\n                setIsLoading(true);\n                await approval.wait();\n                setIsLoading(false);\n                setIsApproved(true)\n            } else {\n                console.log(\"no ethereum object\");\n            }\n        } catch (error) {\n            console.log(error);\n            throw new Error(\"no ethereum object\");\n        }\n\n    }\n\n\n\n    async function makeSwap() {\n        try {\n            if (ethereum) {\n                const { amount } = inputData;\n                const parsedAmount = ethers.utils.parseUnits(amount, 18);\n                const hmSwapContract = createSwapContract();\n                const swap = await hmSwapContract.swap(fromTokenAddress, toTokenAddress, parsedAmount);\n                setIsLoading(true);\n                await swap.wait();\n                setIsLoading(false);\n                setIsApproved(false)\n                window.location.reload()\n            } else {\n                console.log(\"no ethereum object\");\n            }\n        } catch (error) {\n            console.log(error);\n            throw new Error(\"no ethereum object\");\n        }\n\n    }\n\n\n    async function calculateOutput() {\n        const { amount } = inputData;\n        if (amount === \"\") {\n            setOutputData(\"Output Amount...\");\n        } else {\n            const parsedAmount = ethers.utils.parseUnits(amount, 18);\n            const hmSwapContract = createSwapContract();\n            const output = await hmSwapContract.calculateReturn(fromTokenAddress, toTokenAddress, parsedAmount);\n            const bigOutput = BigNumber.from(output);\n            const formattedAmount = ethers.utils.formatUnits(bigOutput, 18);\n            setOutputData(formattedAmount);\n        }\n    }\n\n\n\n    const handleChange = (e) => {\n        const { id, value } = e.target;\n        setInputData((prevState) => {\n            return {\n                ...prevState,\n                [id]: value,\n            };\n        });\n        setIsApproved(false);\n\n\n    };\n\n\n    const handleSubmit = (e) => {\n        const { amount } = inputData;\n\n        e.preventDefault();\n\n        if (!amount) return;\n\n        makeSwap();\n    };\n\n\n    React.useEffect(() => {\n        checkIfWalletIsConnect();\n    });\n\n    React.useEffect(() => {\n        calculateOutput()\n    }, [inputData]);\n\n\n\n    return (\n        <div className='Swap-bg p-5'>\n            <div className='container rounded p-4'>\n                <div className='row justify-content-center'>\n                    <div className='col col-md-6'>\n                        <div className='bg-dark p-3 rounded'>\n                            <h3 className='text-light text-start my-1 ms-3'>Swap</h3>\n                            <div className='container'>\n                                <div className='col'>\n                                    <div className='row row-3 my-3 bg-secondary rounded p-3'>\n                                        <div className='container'>\n                                            <div className='row align-items-center justify-content-between'>\n                                                <div className='col col-8'>\n                                                    <input type=\"number\" className=\"form-control\" id=\"amount\" placeholder=\"Amount\" onChange={handleChange} />\n                                                </div>\n                                                <div className='col col-4 mt-2'>\n                                                    <div className=\"d-grid gap-2 mx-2 mb-2\">\n                                                        <button className='btn btn-light' onClick={() => openFromModal()}>\n                                                            {fromTokenSelected}\n                                                        </button>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div className='row row-3 my-3 bg-secondary rounded p-3'>\n                                        <div className='container'>\n                                            <div className='row align-items-center justify-content-between'>\n                                                <div className='col col-8 mt-2'>\n                                                    <div className=\"d-grid gap-2 mx-2 mb-1\">\n                                                        <button className='btn btn-light text-secondary text-start'>\n                                                            {ouputData}\n                                                        </button>\n                                                    </div>\n                                                </div>\n                                                <div className='col col-4 mt-2'>\n                                                    <div className=\"d-grid gap-2 mx-2 mb-1\">\n                                                        <button className='btn btn-light' onClick={() => OpenToModal()}>\n                                                            {toTokenSelected}\n                                                        </button>\n                                                    </div>\n\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div className=\"d-grid gap-2 mx-2 mb-1\">\n                                {!isConnected ?\n                                    <button className=\"btn btn-primary\" type=\"button\" onClick={connectToMetamask}>\n                                        <h6 className='fw-bold mt-1'>Connect Wallet</h6>\n                                    </button>\n                                    :\n                                    isLoading ?\n                                        <button className=\"btn btn-secondary\" type=\"button\" disabled>\n                                            <h6 className='fw-bold mt-1'>Loading...</h6>\n                                        </button>\n                                        : !isApproved ?\n                                            <button className=\"btn btn-secondary\" type=\"button\" onClick={approveSwap}>\n                                                <h6 className='fw-bold mt-1'>Approve</h6>\n                                            </button>\n                                            : <button className=\"btn btn-secondary\" type=\"button\" onClick={handleSubmit}>\n                                                <h6 className='fw-bold mt-1'>SWAP</h6>\n                                            </button>\n\n                                }\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <ChooseTokenModal\n                show={modalShow}\n                onHide={() => setModalShow(false)}\n            />\n        </div>\n\n    )\n}\n\nexport default Swap","/Users/matthewstein/hiremeswap/frontend/src/components/Footer.jsx",["42"],[],"import React from 'react'\nimport logo from \"../images/hmswaplogo.png\"\n\nfunction Footer() {\n    return (\n        <div className='Navbar-bg pb-2'>\n            <img src={logo} className='mt-3 mb-1 Footer-logo'></img>\n            <h6 className='text-secondary'>Created By: Matthew Stein</h6>\n            <h6 className='text-secondary'>Email: Mkstein16@gmail.com</h6>\n        </div>\n    )\n}\n\nexport default Footer","/Users/matthewstein/hiremeswap/frontend/src/components/Stake.jsx",["43"],[],"import React from 'react'\nimport { Modal } from \"react-bootstrap\"\nimport stakeABI from \"../utils/abis/HireMeStake.json\"\nimport approveABI from \"../utils/abis/approveABI.json\"\nimport { ethers } from \"ethers\"\n\n\nfunction Stake() {\n    const { ethereum } = window;\n\n\n    const stakeContractAddress = \"0x23BeC9418eAe8023EC185f4840E46E3DcFF77028\";\n    const stakeContractAbi = stakeABI.abi;\n    const tokenContractAbi = approveABI.abi;\n\n    //const [modalShow, setModalShow] = React.useState(false);\n    const [ethModalShow, setEthModalShow] = React.useState(false);\n    const [daiModalShow, setDaiModalShow] = React.useState(false);\n    const [hmtModalShow, setHmtModalShow] = React.useState(false);\n    const [linkModalShow, setLinkModalShow] = React.useState(false);\n    const [unethModalShow, setUnEthModalShow] = React.useState(false);\n    const [undaiModalShow, setUnDaiModalShow] = React.useState(false);\n    const [unhmtModalShow, setUnHmtModalShow] = React.useState(false);\n    const [unlinkModalShow, setUnLinkModalShow] = React.useState(false);\n    const [amountWethStaked, setAmountWethStaked] = React.useState();\n    const [amountDaiStaked, setAmountDaiStaked] = React.useState();\n    const [amountHmtStaked, setAmountHmtStaked] = React.useState();\n    const [amountLinkStaked, setAmountLinkStaked] = React.useState();\n    const [amountWethRedeemed, setAmountWethRedeemed] = React.useState();\n    const [amountDaiRedeemed, setAmountDaiRedeemed] = React.useState();\n    const [amountHmtRedeemed, setAmountHmtRedeemed] = React.useState();\n    const [amountLinkRedeemed, setAmountLinkRedeemed] = React.useState();\n    const [currentAccount, setCurrentAccount] = React.useState();\n    const [isClaiming, setIsClaiming] = React.useState(false);\n\n    async function getAccount() {\n        const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n        const account = accounts[0];\n        setCurrentAccount(account);\n    }\n\n\n\n\n    function OpenETHModal() {\n        return (\n            <StakeModal\n                show={ethModalShow}\n                onHide={() => setEthModalShow(false)}\n                name=\"WETH\"\n                address=\"0xd0A1E359811322d97991E03f863a0C30C2cF029C\"\n            />)\n    }\n\n    function OpenDAIModal() {\n        return (\n            <StakeModal\n                show={daiModalShow}\n                onHide={() => setDaiModalShow(false)}\n                name=\"DAI\"\n                address=\"0x4F96Fe3b7A6Cf9725f59d353F723c1bDb64CA6Aa\"\n            />)\n    }\n\n    function OpenHMTModal() {\n        return (\n            <StakeModal\n                show={hmtModalShow}\n                onHide={() => setHmtModalShow(false)}\n                name=\"HMT\"\n                address=\"0x8ADc4D9E41eeC6Ef65C310FCEbeFC28e14ed2d1B\"\n            />)\n    }\n\n    function OpenLINKModal() {\n        return (\n            <StakeModal\n                show={linkModalShow}\n                onHide={() => setLinkModalShow(false)}\n                name=\"LINK\"\n                address=\"0xa36085F69e2889c224210F603D836748e7dC0088\"\n            />)\n    }\n\n    function OpenUNETHModal() {\n        return (\n            <UnStakeModal\n                show={unethModalShow}\n                onHide={() => setUnEthModalShow(false)}\n                name=\"WETH\"\n                address=\"0xd0A1E359811322d97991E03f863a0C30C2cF029C\"\n                rewards={amountWethRedeemed}\n                staked={amountWethStaked}\n            />)\n    }\n\n    function OpenUNDAIModal() {\n        return (\n            <UnStakeModal\n                show={undaiModalShow}\n                onHide={() => setUnDaiModalShow(false)}\n                name=\"DAI\"\n                address=\"0x4F96Fe3b7A6Cf9725f59d353F723c1bDb64CA6Aa\"\n                rewards={amountDaiRedeemed}\n                staked={amountDaiStaked}\n            />)\n    }\n\n    function OpenUNHMTModal() {\n        return (\n            <UnStakeModal\n                show={unhmtModalShow}\n                onHide={() => setUnHmtModalShow(false)}\n                name=\"HMT\"\n                address=\"0x8ADc4D9E41eeC6Ef65C310FCEbeFC28e14ed2d1B\"\n                rewards={amountHmtRedeemed}\n                staked={amountHmtStaked}\n            />)\n    }\n\n    function OpenUNLINKModal() {\n        return (\n            <UnStakeModal\n                show={unlinkModalShow}\n                onHide={() => setUnLinkModalShow(false)}\n                name=\"LINK\"\n                address=\"0xa36085F69e2889c224210F603D836748e7dC0088\"\n                rewards={amountLinkRedeemed}\n                staked={amountLinkStaked}\n\n            />)\n    }\n\n    function StakeModal(props) {\n        const [inputData, setInputData] = React.useState({ amount: \"\" });\n        const [isLoading, setIsLoading] = React.useState(false);\n        const [isApproved, setIsApproved] = React.useState(false);\n\n        const handleChange = (e) => {\n            const { id, value } = e.target;\n            setInputData((prevState) => {\n                return {\n                    ...prevState,\n                    [id]: value,\n                };\n            });\n            setIsApproved(false);\n        };\n\n        async function Approve() {\n            try {\n                if (ethereum) {\n                    const { amount } = inputData;\n                    const parsedAmount = ethers.utils.parseUnits(amount, 18);\n                    const provider = new ethers.providers.Web3Provider(ethereum);\n                    const signer = provider.getSigner();\n                    const tokenContract = new ethers.Contract(props.address, tokenContractAbi, signer);\n                    const approval = await tokenContract.approve(stakeContractAddress, parsedAmount);\n                    setIsLoading(true);\n                    await approval.wait();\n                    setIsLoading(false);\n                    setIsApproved(true)\n                } else {\n                    console.log(\"no ethereum object\");\n                }\n            } catch (error) {\n                console.log(error);\n                throw new Error(\"no ethereum object\");\n            }\n        }\n\n        async function stake() {\n            try {\n                if (ethereum) {\n                    const { amount } = inputData;\n                    const parsedAmount = ethers.utils.parseUnits(amount, 18);\n                    const hmStakeContract = createStakeContract();\n                    const tx = await hmStakeContract.deposit(props.address, parsedAmount);\n                    setIsLoading(true);\n                    await tx.wait();\n                    setIsLoading(false);\n                    setIsApproved(false);\n                    window.location.reload()\n                } else {\n                    console.log(\"no ethereum object\");\n                }\n            } catch (error) {\n                console.log(error);\n                throw new Error(\"no ethereum object\");\n            }\n\n        }\n\n\n        return (\n            <div>\n                <Modal\n                    {...props}\n                    size=\"lg\"\n                    aria-labelledby=\"contained-modal-title-vcenter\"\n                    centered\n                >\n                    <div className=\"modal-header bg-dark\">\n                        <h3 className=\"modal-title ms-3 text-light\" id=\"staticBackdropLabel\">Stake {props.name}</h3>\n                        <button type=\"button\" className=\"btn-close btn-close-white\" onClick={props.onHide} aria-label=\"Close\"></button>\n                    </div>\n                    <div className=\"modal-body\">\n                        <h5 className='ms-3'>Current {props.name} Staked: {props.staked} {props.name}</h5>\n                        <h5 className='ms-3 mt-1 mb-3'>Total Rewards Yielded: {props.rewards} HMT</h5>\n                        <hr />\n                        <div className=\"container\">\n                            <div className=\"row\">\n                                <div className=\"col col-4\">\n                                    <h5 className='mt-3'> {props.name} To Stake:</h5>\n                                </div>\n                                <div className=\"col col-6\">\n                                    <input type=\"number\" className=\"form-control mt-2\" id=\"amount\" placeholder=\"Amount\" onChange={handleChange} />\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"d-grid gap-2 mb-4 mx-2\">\n                        <hr />\n                        {isLoading ?\n                            <button className='btn btn-dark text-light align-items-center' disabled>\n                                <h5 className='mt-2'>Loading...</h5>\n                            </button>\n                            : isApproved ?\n                                <button className='btn btn-dark text-light align-items-center' onClick={stake}>\n                                    <h5 className='mt-2'>Stake</h5>\n                                </button>\n                                :\n                                <button className='btn btn-dark text-light align-items-center' onClick={Approve}>\n                                    <h5 className='mt-2'>Approve Stake</h5>\n                                </button>\n                        }\n                    </div>\n\n                </Modal>\n            </div>\n        );\n    }\n\n    function UnStakeModal(props) {\n        const [inputData, setInputData] = React.useState({ amount: \"\" });\n        const [isLoading, setIsLoading] = React.useState(false);\n\n        const handleChange = (e) => {\n            const { id, value } = e.target;\n            setInputData((prevState) => {\n                return {\n                    ...prevState,\n                    [id]: value,\n                };\n            });\n        };\n\n        async function unStake() {\n            try {\n                if (ethereum) {\n                    const { amount } = inputData;\n                    const parsedAmount = ethers.utils.parseUnits(amount, 18);\n                    const hmStakeContract = createStakeContract();\n                    const tx = await hmStakeContract.withdraw(props.address, parsedAmount);\n                    setIsLoading(true);\n                    await tx.wait();\n                    setIsLoading(false);\n                    window.location.reload()\n                } else {\n                    console.log(\"no ethereum object\");\n                }\n            } catch (error) {\n                console.log(error);\n                throw new Error(\"no ethereum object\");\n            }\n\n        }\n\n        const handleSubmit = (e) => {\n            const { amount } = inputData;\n\n            e.preventDefault();\n\n            if (!amount) return;\n\n            unStake();\n        };\n\n        return (\n            <div>\n                <Modal\n                    {...props}\n                    size=\"lg\"\n                    aria-labelledby=\"contained-modal-title-vcenter\"\n                    centered\n                >\n                    <div className=\"modal-header bg-dark\">\n                        <h3 className=\"modal-title ms-3 text-light\" id=\"staticBackdropLabel\">UnStake {props.name}</h3>\n                        <button type=\"button\" className=\"btn-close btn-close-white\" onClick={props.onHide} aria-label=\"Close\"></button>\n                    </div>\n                    <div className=\"modal-body\">\n                        <h5 className='ms-3'>Current {props.name} Staked: {props.staked} {props.name}</h5>\n                        <h5 className='ms-3 mt-1 mb-3'>Total Rewards Yielded: {props.rewards} HMT</h5>\n                        <hr />\n                        <div className=\"container\">\n                            <div className=\"row\">\n                                <div className=\"col col-4 mt-1\">\n                                    <h5>Amount to unstake:</h5>\n                                </div>\n                                <div className=\"col col-6\">\n                                    <input type=\"number\" className=\"form-control\" id=\"amount\" placeholder=\"Amount\" onChange={handleChange} />\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"d-grid gap-2 mb-4 mx-2\">\n                        <hr />\n                        {isLoading ?\n                            <button className='btn btn-dark text-light align-items-center' disabled>\n                                <h5 className='mt-2'>Loading...</h5>\n                            </button>\n                            :\n                            <button className='btn btn-dark text-light align-items-center' onClick={handleSubmit}>\n                                <h5 className='mt-2'>UNSTAKE</h5>\n                            </button>\n                        }\n\n                    </div>\n\n                </Modal>\n            </div>\n        );\n    }\n\n    function createStakeContract() {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const hmStakeContract = new ethers.Contract(stakeContractAddress, stakeContractAbi, signer);\n        return hmStakeContract;\n    }\n\n    async function getAmountsStaked() {\n        const hmStakeContract = createStakeContract();\n        const wethStaked = await hmStakeContract.amountStaked({ currentAccount }, \"0xd0A1E359811322d97991E03f863a0C30C2cF029C\");\n        const formattedwethStaked = ethers.utils.formatUnits(wethStaked, 18);\n        setAmountWethStaked(Number(formattedwethStaked));\n        const daiStaked = await hmStakeContract.amountStaked({ currentAccount }, \"0x4F96Fe3b7A6Cf9725f59d353F723c1bDb64CA6Aa\");\n        const formatteddaiStaked = ethers.utils.formatUnits(daiStaked, 18);\n        setAmountDaiStaked(Number(formatteddaiStaked));\n        const hmtStaked = await hmStakeContract.amountStaked({ currentAccount }, \"0x8ADc4D9E41eeC6Ef65C310FCEbeFC28e14ed2d1B\");\n        const formattedhmtStaked = ethers.utils.formatUnits(hmtStaked, 18);\n        setAmountHmtStaked(Number(formattedhmtStaked));\n        const linkStaked = await hmStakeContract.amountStaked({ currentAccount }, \"0xa36085F69e2889c224210F603D836748e7dC0088\");\n        const formattedlinkStaked = ethers.utils.formatUnits(linkStaked, 18);\n        setAmountLinkStaked(Number(formattedlinkStaked));\n\n    }\n\n    async function getAmountsRedeemed() {\n        const hmStakeContract = createStakeContract();\n        const wethRedeemed = await hmStakeContract.amountReedeemed({ currentAccount }, \"0xd0A1E359811322d97991E03f863a0C30C2cF029C\");\n        const formattedwethRedeemed = ethers.utils.formatUnits(wethRedeemed, 18);\n        setAmountWethRedeemed(Number(formattedwethRedeemed));\n        const daiRedeemed = await hmStakeContract.amountReedeemed({ currentAccount }, \"0x4F96Fe3b7A6Cf9725f59d353F723c1bDb64CA6Aa\");\n        const formatteddaiRedeemed = ethers.utils.formatUnits(daiRedeemed, 18);\n        setAmountDaiRedeemed(Number(formatteddaiRedeemed));\n        const hmtRedeemed = await hmStakeContract.amountReedeemed({ currentAccount }, \"0x8ADc4D9E41eeC6Ef65C310FCEbeFC28e14ed2d1B\");\n        const formattedhmtRedeemed = ethers.utils.formatUnits(hmtRedeemed, 18);\n        setAmountHmtRedeemed(Number(formattedhmtRedeemed));\n        const linkRedeemed = await hmStakeContract.amountReedeemed({ currentAccount }, \"0xa36085F69e2889c224210F603D836748e7dC0088\");\n        const formattedlinkRedeemed = ethers.utils.formatUnits(linkRedeemed, 18);\n        setAmountLinkRedeemed(Number(formattedlinkRedeemed));\n    }\n\n\n    async function claim(claimTokenAddress) {\n        try {\n            if (ethereum) {\n                const hmStakeContract = createStakeContract();\n                const tx = await hmStakeContract.claimRewards(claimTokenAddress);\n                setIsClaiming(true);\n                await tx.wait();\n                setIsClaiming(false);\n                window.location.reload()\n            } else {\n                console.log(\"no ethereum object\");\n            }\n        } catch (error) {\n            console.log(error);\n            throw new Error(\"no ethereum object\");\n        }\n    }\n\n\n\n\n    React.useEffect(() => {\n        getAmountsStaked()\n        getAmountsRedeemed()\n    }, []);\n\n    React.useEffect(() => {\n        getAccount()\n    });\n\n\n\n\n    return (\n        <div className='bg-dark'>\n            <div className='container p-3'>\n                <h1 className='display-3 text-light mt-3 Swap-bg'>STAKE</h1>\n                <h4 className='text-light mt-1 mb-3'>Earn 1 HMT for every $50 worth tokens staked and claim rewards every 10 seconds</h4>\n                <table className=\"table bg-light rounded p-2 mb-5\">\n                    <thead>\n                        <tr>\n                            <th scope=\"col\">Token</th>\n                            <th scope=\"col\">Staked</th>\n                            <th scope=\"col\">Earned</th>\n                            <th scope=\"col\">Stake</th>\n                            <th scope=\"col\">UnStake</th>\n                            <th scope=\"col\">Claim</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <th scope=\"row\">WETH</th>\n                            <td>{amountWethStaked} WETH</td>\n                            <td>{amountWethRedeemed} HMT</td>\n                            <td>\n                                <button className='btn btn-secondary' onClick={() => setEthModalShow(true)}>STAKE</button>\n                            </td>\n                            <td>\n                                <button className='btn btn-secondary' onClick={() => setUnEthModalShow(true)}>UNSTAKE</button>\n                            </td>\n                            <td>\n                                {isClaiming ?\n                                    <button className='btn btn-secondary' disabled>Claiming...</button>\n                                    :\n                                    <button className='btn btn-secondary' onClick={() => claim(\"0xd0A1E359811322d97991E03f863a0C30C2cF029C\")}>CLAIM</button>\n                                }\n\n                            </td>\n                        </tr>\n                        <tr>\n                            <th scope=\"row\">DAI</th>\n                            <td>{amountDaiStaked} DAI</td>\n                            <td>{amountDaiRedeemed} HMT</td>\n                            <td>\n                                <button className='btn btn-secondary' onClick={() => setDaiModalShow(true)}>STAKE</button>\n                            </td>\n                            <td>\n                                <button className='btn btn-secondary' onClick={() => setUnDaiModalShow(true)}>UNSTAKE</button>\n                            </td>\n                            <td>\n                                {isClaiming ?\n                                    <button className='btn btn-secondary' disabled>Claiming...</button>\n                                    :\n                                    <button className='btn btn-secondary' onClick={() => claim(\"0x4F96Fe3b7A6Cf9725f59d353F723c1bDb64CA6Aa\")}>CLAIM</button>\n                                }\n                            </td>\n                        </tr>\n                        <tr>\n                            <th scope=\"row\">HMT</th>\n                            <td>{amountHmtStaked} HMT</td>\n                            <td>{amountHmtRedeemed} HMT</td>\n                            <td>\n                                <button className='btn btn-secondary' onClick={() => setHmtModalShow(true)}>STAKE</button>\n                            </td>\n                            <td>\n                                <button className='btn btn-secondary' onClick={() => setUnHmtModalShow(true)}>UNSTAKE</button>\n                            </td>\n                            <td>\n                                {isClaiming ?\n                                    <button className='btn btn-secondary' disabled>Claiming...</button>\n                                    :\n                                    <button className='btn btn-secondary' onClick={() => claim(\"0x8ADc4D9E41eeC6Ef65C310FCEbeFC28e14ed2d1B\")}>CLAIM</button>\n                                }\n\n                            </td>\n                        </tr>\n                        <tr>\n                            <th scope=\"row\">LINK</th>\n                            <td>{amountLinkStaked} LINK</td>\n                            <td>{amountLinkRedeemed} HMT</td>\n                            <td>\n                                <button className='btn btn-secondary' onClick={() => setLinkModalShow(true)}>STAKE</button>\n                            </td>\n                            <td>\n                                <button className='btn btn-secondary' onClick={() => setUnLinkModalShow(true)}>UNSTAKE</button>\n                            </td>\n                            <td>\n                                {isClaiming ?\n                                    <button className='btn btn-secondary' disabled>Claiming...</button>\n                                    :\n                                    <button className='btn btn-secondary' onClick={() => claim(\"0xa36085F69e2889c224210F603D836748e7dC0088\")}>CLAIM</button>\n                                }\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n\n            <OpenETHModal\n                show={ethModalShow}\n                onHide={() => setEthModalShow(false)} />\n            <OpenDAIModal\n                show={daiModalShow}\n                onHide={() => setDaiModalShow(false)} />\n            <OpenHMTModal\n                show={hmtModalShow}\n                onHide={() => setHmtModalShow(false)} />\n            <OpenLINKModal\n                show={linkModalShow}\n                onHide={() => setLinkModalShow(false)} />\n            <OpenUNETHModal\n                show={unethModalShow}\n                onHide={() => setUnEthModalShow(false)} />\n            <OpenUNDAIModal\n                show={undaiModalShow}\n                onHide={() => setUnDaiModalShow(false)} />\n            <OpenUNHMTModal\n                show={unhmtModalShow}\n                onHide={() => setUnHmtModalShow(false)} />\n            <OpenUNLINKModal\n                show={unlinkModalShow}\n                onHide={() => setUnLinkModalShow(false)} />\n        </div>\n    )\n}\n\nexport default Stake",{"ruleId":"44","severity":1,"message":"45","line":262,"column":8,"nodeType":"46","endLine":262,"endColumn":19,"suggestions":"47"},{"ruleId":"48","severity":1,"message":"49","line":7,"column":13,"nodeType":"50","endLine":7,"endColumn":63},{"ruleId":"44","severity":1,"message":"51","line":400,"column":8,"nodeType":"46","endLine":400,"endColumn":10,"suggestions":"52"},"react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'calculateOutput'. Either include it or remove the dependency array.","ArrayExpression",["53"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook React.useEffect has missing dependencies: 'getAmountsRedeemed' and 'getAmountsStaked'. Either include them or remove the dependency array.",["54"],{"desc":"55","fix":"56"},{"desc":"57","fix":"58"},"Update the dependencies array to be: [calculateOutput, inputData]",{"range":"59","text":"60"},"Update the dependencies array to be: [getAmountsRedeemed, getAmountsStaked]",{"range":"61","text":"62"},[9010,9021],"[calculateOutput, inputData]",[16292,16294],"[getAmountsRedeemed, getAmountsStaked]"]